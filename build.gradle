plugins() {
  id("java")

  id("com.github.johnrengelman.shadow").version("8.1.1")

  id("checkstyle")
  id("com.github.spotbugs").version("6.0.2")
  id("org.cadixdev.licenser").version("0.6.1")

  id("com.github.gmazzo.buildconfig").version("4.2.0") // Kotlin :skull:
}

this.group = "net.elytrium"
this.version = "1.2.1-SNAPSHOT"

compileJava() {
  sourceCompatibility = 17
  targetCompatibility = 17
  options.getRelease().set(11)

  options.setEncoding("UTF-8")
}

repositories() {
  mavenCentral()

  maven {
    name = "elytrium-repo"
    url = "https://maven.elytrium.net/repo/"
  }
  maven {
    name = "papermc-repo"
    url = "https://repo.papermc.io/repository/maven-public/"
  }
}

dependencies() {
  annotationProcessor("net.java.dev.jna:jna-platform:5.13.0")
  annotationProcessor("com.github.bsideup.jabel:jabel-javac-plugin:1.0.0") // Dreeam TODO - Waiting to bump to 1.0.1

  compileOnly("com.github.spotbugs:spotbugs-annotations:4.8.2")

  compileOnly("com.velocitypowered:velocity-api:3.3.0-SNAPSHOT")
  annotationProcessor("com.velocitypowered:velocity-api:3.3.0-SNAPSHOT")
  compileOnly("com.velocitypowered:velocity-proxy:3.3.0-SNAPSHOT") // From Elytrium Repo.

  // Needs for some velocity methods.
  compileOnly("io.netty:netty-transport:4.1.101.Final")
  compileOnly("it.unimi.dsi:fastutil-core:8.5.12")

  // To suppress VulnerableLibrariesLocal of velocity-api dependency.
  compileOnly("org.yaml:snakeyaml:2.2")

  implementation("net.elytrium:java-commons:1.1.1") // Newest is 1.2.5
  implementation("net.elytrium:fastprepare:1.0.7")

  implementation("org.bstats:bstats-velocity:3.0.2")
}

shadowJar() {
  archiveClassifier = null

  minimize()
  enableRelocation = true
  relocationPrefix = "net.elytrium.velocitytools.3rdparty"
}

checkstyle() {
  toolVersion = "10.12.4"

  configFile = file(".config/checkstyle/checkstyle.xml")
  configProperties = ["configDirectory": "$rootDir/.config/checkstyle"]
  maxErrors = 0
  maxWarnings = 0
}

spotbugsMain() {
  reports.register("html") {
    required = true
    outputLocation.fileValue(file("${project.layout.buildDirectory.get()}/reports/spotbugs/main/spotbugs.html"))
    stylesheet = "fancy-hist.xsl"
  }
}

license() {
  header = file("HEADER.txt")

  exclude("**/BuildConfig.java")
}

buildConfig() {
  packageName("net.elytrium.velocitytools")
  buildConfigField("String", "VERSION", "\"$version\"")
}

assemble.dependsOn(shadowJar)
